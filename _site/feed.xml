<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Adam Kaplan</title>
		<description>Design Apprentice at 8th Light</description>
		<link>http://www.adamkaplandesign.com</link>
		<atom:link href="http://www.adamkaplandesign.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Write Better CSS</title>
				<description>&lt;h2&gt;Writing better CSS can be easy. Remember to normalize, organize and alphabetize!&lt;/h2&gt;




&lt;p&gt;
I'm going to be giving a short presentation titled &quot;Write Better CSS&quot; at Apprentice Learning Hour but wanted to start collecting my thoughts here first. Spoilers ahead!
&lt;/p&gt;




&lt;p&gt;
Steps to writing better CSS (I couldn't help myself with the naming):
&lt;/p&gt;




&lt;ul&gt;
  &lt;li&gt;Normalize&lt;/li&gt;
  &lt;li&gt;Organize&lt;/li&gt;
  &lt;li&gt;Alphabetize&lt;/li&gt;
  &lt;li&gt;DRY and write reusable CSS&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;Normalize&lt;/h3&gt;


&lt;p&gt;
Resets remove the default styles for all elements while &lt;a href=&quot;http://necolas.github.com/normalize.css/&quot; target=&quot;_blank&quot;&gt;normalize&lt;/a&gt; retains most of the useful default browser styles. When starting a new project, I prefer normalize over resets.
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;
Normalize.css is a small CSS file that provides better cross-browser consistency in the default styling of HTML elements. It’s a modern, HTML5-ready, alternative to the traditional CSS reset. 
&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;
It also corrects bugs commonly found in browser inconsistencies and doesn't clutter your debugging tool. Simply download and use &lt;a href=&quot;http://necolas.github.com/normalize.css/&quot; target=&quot;_blank&quot;&gt;normalize.css&lt;/a&gt; as-is, or customize it to meet your requirements.
&lt;/p&gt;




&lt;h3&gt;Organize&lt;/h3&gt;


&lt;p&gt;
Organize your CSS code to reflect the flow of your website's layout. For example, your navigation CSS should be at the top of your file and your footer should be closer to the bottom:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/4f1cad35c6c791542c10.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
Put properties related to one another close together and &lt;em&gt;use comments sparingly&lt;/em&gt; to break up the different sections of your CSS. The combination of a few comments and grouping similar elements together will make it much easier to quickly find what your looking for.
&lt;/p&gt;




&lt;h3&gt;Alphabetize your properties&lt;/h3&gt;


&lt;p&gt;
Write your CSS properties in alphabetical order; it will help reduce the time it takes to find a specific property.
&lt;/p&gt;




&lt;p&gt;
Jen Myers' post on &lt;a href=&quot;http://jenmyers.tumblr.com/post/45339751868/why-you-should-order-css-properties-alphabetically&quot; target=&quot;_blank&quot;&gt;Why you should order CSS properties alphabetically&lt;/a&gt; made me a believer:
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;
Here’s the simple truth up-front: alphabetical CSS ordering makes your CSS most easily accessible to the widest group of people with the least amount of clutter in your stylesheets.
&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;
This principle is fairly new to me, but has really helped make my code more navigable. Which example makes it easier to find specific properties:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/8f0f05409107f339cafb.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
The second CSS block is easter to skim through, right? I know the z-index will always be at the bottom of the block. Don't worry about alphabetizing vendor prefixes (like box-sizing or transition, for example) with the rest of your properties, as you will want to keep those grouped together.
&lt;/p&gt;




&lt;h3&gt;Don't repeat yourself and write reusable CSS&lt;/h3&gt;


&lt;p&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot; target=&quot;_blank&quot;&gt;DRY&lt;/a&gt; up your code! Repeating yourself leads to huge CSS files and unnecessary code bloat. Take the time to plan out your elements in a simple and reusable way. Reuse your classes and tag on additional classes when needed.
&lt;/p&gt;




&lt;p&gt;
Here's some really repetitive code:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/4cf7c42030c0885770d8.js&quot;&gt;&lt;/script&gt;


&lt;script src=&quot;https://gist.github.com/aekaplan/1cd17e1728522e397c33.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
Lets DRY this up and make it a bit more reusable:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/1de0549cc4ee559823d9.js&quot;&gt;&lt;/script&gt;


&lt;script src=&quot;https://gist.github.com/aekaplan/c068be2d748c8c9f03c1.js&quot;&gt;&lt;/script&gt;




&lt;h3&gt;Be consistent and thoughtful... and clean up your code!&lt;/h3&gt;


&lt;p&gt;
These simple steps will make your CSS more organized, lightweight and easier to read. This will only benefit you and anyone else who needs to make changes to your code.
&lt;/p&gt;

</description>
				<pubDate>Thu, 28 Mar 2013 00:00:00 -0500</pubDate>
				<link>http://www.adamkaplandesign.com/write-better-css.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/write-better-css.html</guid>
			</item>
		
			<item>
				<title>Wireframing</title>
				<description>&lt;h2&gt;Wireframing is a useful first step in the design process, allowing you to focus on defining the information hierarchy and user experience.&lt;/h2&gt;




&lt;p&gt;What is wireframing?&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;
A basic visual guide used to suggest the layout of fundamental elements in a web interface.
&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;p&gt;Wireframing allows you to focus on:&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
  &lt;li&gt;planning the  general layout&lt;/li&gt;
  &lt;li&gt;determing how the user will interact with your interface&lt;/li&gt;
  &lt;li&gt;the range of functions available to your user&lt;/li&gt;
  &lt;li&gt;the kinds of information displayed&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Meet Balsamiq&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
&lt;a href=&quot;http://www.balsamiq.com/&quot; target=&quot;_blank&quot;&gt;Balsamiq&lt;/a&gt; is a wireframing application for quick mockups. It&amp;rsquo;s like sketching except that it&amp;rsquo;s digital, allowing you to easily tweak and rearrange your ideas.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
I prefer low-fidelity wireframes because they allow you to focus on the core functionality and user experience while avoiding time-consuming specifics. Oftentimes if you deliver a wireframe that look &amp;#8220;too finished&amp;#8221; the client might think it&amp;rsquo;s the final design.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
This keeps the conversations focused on what matters: the user experience!
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Distraction Free&lt;/h3&gt;
&lt;p&gt;
Wireframing lets you work distraction-free because you don&amp;rsquo;t have to worry about picking fonts, colors or writing copy. You also have the freedom to try as many layouts or options you&amp;rsquo;d like. Moving around elements and playing with how placement effects on ease of use is a very rewarding experience. Put on some music and experiment!
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Iterate&lt;/h3&gt;
&lt;p&gt;
Remember that nothing is final. You &lt;strong&gt;will&lt;/strong&gt; iterate on your wireframes before you move on to the prototyping stage; it&amp;rsquo;s almost unavoidable. Don&amp;rsquo;t be afraid to throw out ideas that don&amp;rsquo;t work and try out several layouts.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
It&amp;rsquo;s better to spend the time iterating and experimenting with wireframes while the project is still lightweight and easy to change.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;&amp;#8220;Think more, design less&amp;#8221;&lt;/h3&gt;
&lt;p&gt;
This quote from &lt;a href=&quot;http://www.thinkingwithtype.com/&quot; target=&quot;_blank&quot;&gt;&amp;#8220;Thinking with Type&amp;#8221;&lt;/a&gt; by Ellen Lupton really applies in the real world. I spend a lot of time thinking about the user experience and walking through every aspect of my design, asking myself questions like, &amp;#8220;Do I need this?&amp;#8221; or &amp;#8220;Is this too complicated?&amp;#8221; This critical thinking will prove invaluable when you get to prototyping.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
The time you spend developing the user experience while wireframing will serve as a guide to building an awesome product.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Feedback is Welcome&lt;/h3&gt;
&lt;p&gt;
It&amp;rsquo;s important to get feedback as soon as possible. Don&amp;rsquo;t be afraid to show your wireframes. Get some initial thoughts from the client. Sit some users down for informal &lt;a href=&quot;http://adamkaplandesign.com/usability-testing.html&quot; target=&quot;_blank&quot;&gt;usability testing&lt;/a&gt;. The sooner you let the client or user into the process, the sooner you know how successful your design is.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
I often pair with my mentor, Stephanie, and get instant feedback on my decisions. We bounce ideas off each other all the time, leading to more developed user experiences and better designs.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;
Just remember to keep it simple, put usability first, seek out feedback and experiment.
&lt;/h2&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 21 Mar 2013 00:00:00 -0500</pubDate>
				<link>http://www.adamkaplandesign.com/wireframing.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/wireframing.html</guid>
			</item>
		
			<item>
				<title>SCSS</title>
				<description>&lt;h2&gt;I’ve been learning some Sassy CSS and wanted to talk about three awesome features that it provides: variables, nesting and mixins.&lt;/h2&gt;




&lt;p&gt;
  At a high level, Sass is simply a CSS preprocessor with two syntaxes:
&lt;/p&gt;




&lt;blockquote&gt;
  &lt;p&gt;
  The most commonly used syntax is known as “SCSS” (for “Sassy CSS”), and is a superset of CSS3’s syntax. This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss.
  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
  &lt;p&gt;
    The second, older syntax is known as the &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.INDENTED_SYNTAX.html&quot; target=&quot;_blank&quot;&gt; indented syntax&lt;/a&gt; (or just “.sass”). Inspired by &lt;a href=&quot;http://haml.info/&quot; target=&quot;_blank&quot;&gt;Haml’s&lt;/a&gt; terseness, it’s intended for people who prefer conciseness over similarity to CSS. 
  &lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
I prefer using SCSS because it uses brackets and semi-colons, just like CSS. It also doesn’t care about indentation levels or white-space, like the second syntax. SCSS contains all the features of CSS, but has been expanded to include the features of Sass as well.
&lt;/p&gt;




&lt;h3&gt;Installing SCSS&lt;/h3&gt;


&lt;p&gt;You will need to get Sass setup on your project before you can start using it. A lot of the new frameworks come with Sass pre-installed. Here are some great resources to help you:&lt;/p&gt;




&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sass-lang.com/download.html&quot; target=&quot;_blank&quot;&gt;Install Sass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out the &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sassy documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Rails &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;asset pipeline&lt;/a&gt; supports SCSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://middlemanapp.com/&quot; target=&quot;_blank&quot;&gt;Middleman&lt;/a&gt; comes with SCSS by default.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;Variables&lt;/h3&gt;




&lt;p&gt;
I was recently pairing with my mentor Stephanie and we decided on the blue hex #25A8E0 for our links and buttons. Now try remembering that hex number each time you need to use it. Hard, right? We kept forgetting and had to stop and look it up.
&lt;/p&gt;




&lt;p&gt;
  This is where variables becomes a huge time saver:
&lt;/p&gt;




&lt;blockquote&gt;
  &lt;p&gt;
  Variables allow you to re-use colors, sizes, and other values without repeating yourself. This means that changes that should be small, such as tweaking the coloring or the sizing, can be done in one place, not all over the stylesheet.
  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;
SCSS allows you to set variables that can be used throughout your stylesheet. Variables start with $ and are declared just like properties. You can use any value that the CSS property allows such as colors, numbers or text.
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/3b4f85f8e2702beae02f.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;Pretty awesome right? I just set my variables and label them. Now I only have to remember $blue rather than #25A8E0.&lt;/p&gt;




&lt;h3&gt;Nesting&lt;/h3&gt;




&lt;p&gt;
Repeating yourself in your CSS is annoying and makes your files unnecessarily long. SCSS allows you to avoid this by nesting child selectors within parent selectors.
&lt;/p&gt;




&lt;p&gt;With CSS, you might be writing something like this:&lt;/p&gt;


&lt;script src=&quot;https://gist.github.com/aekaplan/bda0d4a3a13010d47348.js&quot;&gt;&lt;/script&gt;




&lt;blockquote&gt;
&lt;p&gt;
  &amp; is a Sass special character. In a selector, &amp; will be replaced verbatim with the parent selector.
&lt;/p&gt;

&lt;/blockquote&gt;




&lt;p&gt;
   Let's take the previous example and nest them:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/40517eb78456c82dd0f3.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
  Much cleaner! Now let's look at an example for a navigation:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/7f752f6b4634dfce0592.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
  That’s a lot of repeating. Instead, let’s nest this bad boy:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/0507587eb3a9b40693ac.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
Boom! This is a great example of how to &lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot; target=&quot;_blank&quot;&gt;DRY up&lt;/a&gt; your CSS code. It does take some getting use to, but after a short while you’ll never want to go back to plain ole CSS.
&lt;/p&gt;




&lt;h3&gt;Mixins&lt;/h3&gt;




&lt;p&gt;
Mixins are one of Sass’s most powerful features. They allow re-use of styles without having to memorize or copy and paste them.
&lt;/p&gt;




&lt;blockquote&gt;
  &lt;p&gt;
  Mixins are defined using the “@mixin” directive, which takes a block of styles that can then be included in another selector using the “@include” directive.
  &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;
So let's say I want to add a nice fade transition to my link and button classes:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/c0b66222424af6b1c0d9.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
That’s a lot of repetition! Let’s use @mixin directive and set a name of fade:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/2c7f314ff56abd923d95.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
  Pretty handy right? Let's get more complicated with some properties that would be harder to remember:
&lt;/p&gt;




&lt;script src=&quot;https://gist.github.com/aekaplan/a58c4838a609b5eff1bb.js&quot;&gt;&lt;/script&gt;




&lt;p&gt;
Now we can reuse box-border on other properties quickly without all the mess.
&lt;/p&gt;




&lt;h2&gt;Give SCSS a try! It makes your front-end coding easier and faster.&lt;/h2&gt;




&lt;p&gt;While SCSS is not an extension of the CSS standard itself, it gives you powerful new features that CSS lacks. Thanks for reading!&lt;/p&gt;



</description>
				<pubDate>Thu, 14 Mar 2013 00:00:00 -0500</pubDate>
				<link>http://www.adamkaplandesign.com/scss.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/scss.html</guid>
			</item>
		
			<item>
				<title>Apprenticeship Projects</title>
				<description>&lt;h2&gt;I have learned so much over the past few weeks and wanted to share my current projects.&lt;/h2&gt;


&lt;p&gt;
  Each week, Stephanie gives me a new assignment to work on. I really enjoy how each project builds off one another. This helps concepts stick while still providing a new challenge. Take a look!
&lt;/p&gt;




&lt;h3&gt;Projects&lt;/h3&gt;




&lt;ul class='post'&gt;
  &lt;li&gt;&lt;a href='http://adamkaplandesign.com/units-of-measure.html' target='_blank'&gt;CSS Units of Measurement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href='http://adamkaplandesign.com/position-properties.html' target='_blank'&gt;Position Properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href='http://adamkaplandesign.com/handcrafted-css' target='_blank'&gt;Handcrafted CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href='http://adamkaplandesign.com/semantic-news-article.html' target='_blank'&gt;Semantic News Article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href='http://adamkaplandesign.com/inline-and-block-elements.html' target='_blank'&gt;Inline and Block Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;div class='note'&gt;
  &lt;p&gt;
    This post was written in Vim, which I'm currently learning.
  &lt;/p&gt;
&lt;/div&gt;

</description>
				<pubDate>Mon, 18 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/apprenticeship-projects.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/apprenticeship-projects.html</guid>
			</item>
		
			<item>
				<title>Optimize your Images</title>
				<description>&lt;h2&gt;When using images on the web, always remove unnecessary bytes.&lt;/h2&gt;




&lt;p&gt;Here are a few simple guidelines when using Photoshop:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;Always use the &lt;strong&gt;Save for Web&lt;/strong&gt; option&lt;/li&gt;
    &lt;li&gt;Try to find a balance between &lt;strong&gt;image quality&lt;/strong&gt; and &lt;strong&gt;file size&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Use &lt;strong&gt;High&lt;/strong&gt; if the image will be visible, &lt;strong&gt;Medium&lt;/strong&gt; or &lt;strong&gt;Low&lt;/strong&gt; for backgrounds&lt;/li&gt;
    &lt;li&gt;Make sure you have the &lt;strong&gt;Optimized&lt;/strong&gt; setting checked&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src='/images/optimize.jpg' /&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Test different file types and optimizations methods&lt;/li&gt;
    &lt;li&gt;Use JPGs for photos and PNGs when you need transparency&lt;/li&gt;
    &lt;li&gt;Use appropriately sized photos when possible&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;Results&lt;/h3&gt;




&lt;p&gt;Stephanie noticed that one of the images on my website was loading slow. By following these simple guidelines, my image went from 2mb to 80kb! That's a huge reduction in size. Thanks Stephanie!&lt;/p&gt;




&lt;p&gt;Here are a few resources that helped me:&lt;/p&gt;


&lt;ul&gt;
    &lt;li&gt;&lt;a href='http://help.adobe.com/en_US/creativesuite/cs/using/WS6E857477-27FE-4a88-B8A4-074DC3C65F68.html' target='blank'&gt;Photoshop: Save for Web&lt;/li&gt;
        &lt;li&gt;&lt;a href='https://developers.google.com/speed/articles/optimizing-images' target='blank'&gt;Google Developers: Optimizing Images&lt;/li&gt;
            &lt;li&gt;&lt;a href='http://www.smushit.com/ysmush.it/' target='blank'&gt;Smush It: A free online tool to help you optimize your images.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Fri, 01 Feb 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/optimize-your-images.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/optimize-your-images.html</guid>
			</item>
		
			<item>
				<title>Moved from Wordpress to Jekyll</title>
				<description>&lt;h2&gt;I accomplished my goal of leaving Wordpress today! It was a hard challenge but my blog is now powered by &lt;a href='http://jekyllrb.com/' target='blank'&gt;Jekyll&lt;/a&gt; and hosted on &lt;a href='http://github.com/' target='blank'&gt;Github&lt;/a&gt;.&lt;/h2&gt;




&lt;p&gt;So why Jekyll?&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;No heavy CMS, database or FTP to deal with.&lt;/li&gt;
    &lt;li&gt;Hosting is free using Github pages!&lt;/li&gt;
    &lt;li&gt;I now get version control and deployment in one place.&lt;/li&gt;
    &lt;li&gt;Direct control over my markup. No more rich-text editor for writing posts.&lt;/li&gt;
    &lt;li&gt;Super fast! I went from 5 s to 300 ms improving load times by 94%.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This site is under construction! I'm learning new skills so I can make this blog awesome. Check back soon.&lt;/p&gt;

</description>
				<pubDate>Tue, 29 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/moved-from-wordpress-to-jekyll.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/moved-from-wordpress-to-jekyll.html</guid>
			</item>
		
			<item>
				<title>Thinking with Type</title>
				<description>&lt;h2&gt;I just finished reading &lt;a href='http://www.thinkingwithtype.com/' target='blank'&gt;Thinking with Type&lt;/a&gt; by Ellen Lupton.&lt;/h2&gt;




&lt;p&gt;There are a lot of great concepts in this book, so I decided to create a few designs using typography to show off my favorites.&lt;/p&gt;




&lt;blockquote&gt;
    &lt;p&gt;Think more, design less.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Some type crimes to be aware of:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;Horizontal and vertical scaling&lt;/li&gt;
    &lt;li&gt;Vertically stacking lowercase&lt;/li&gt;
    &lt;li&gt;Using too many signals (bold, italic, underlined, caps)&lt;/li&gt;
    &lt;li&gt;Don't trap data in heavily guarded cells&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src='/images/type1.jpg' /&gt;
&lt;img src='/images/type2.jpg' /&gt;
&lt;img src='/images/type3.jpg' /&gt;
&lt;img src='/images/type4.jpg' /&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 24 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/thinking-with-type.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/thinking-with-type.html</guid>
			</item>
		
			<item>
				<title>Working with Typography</title>
				<description>&lt;h2&gt;One of the things that I really wanted to get out of this apprenticeship was to learn how to use typography.&lt;/h2&gt;




&lt;p&gt;To get started, Stephanie sent me the video &lt;a href='http://vimeo.com/17079380' target='blank'&gt;More Perfect Typography&lt;/a&gt; by Tim Brown. I got a lot out of his presentation:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;Start with type!&lt;/li&gt;
    &lt;li&gt;Type sets the tone for the experience.&lt;/li&gt;
    &lt;li&gt;Type can make the content feel natural or put a twist on the design.&lt;/li&gt;
    &lt;li&gt;Pick a font size that looks crisp. Find that sweet spot between sizes.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Practice makes perfect, so I decided to apply these guidelines to my blog. I started by setting the body text first. When trying out fonts, use your actual content. It really helps give you a better idea of what the final design will look like.&lt;/p&gt;




&lt;p&gt;I choose Proxima Nova Regular served via &lt;a href='https://typekit.com/' target='blank'&gt;Typekit&lt;/a&gt;. Next, I gave the headers some personality by using Semibold to make them standout.&lt;/p&gt;




&lt;h3&gt;Em &gt; Pixels&lt;/h3&gt;




&lt;p&gt;I went out of my comfort zone and switched from using pixels to ems. Just because the body type looks good on a phone doesn't mean it will look right on a larger display. Ems scale well and keep the relationships with the surrounding elements.&lt;/p&gt;




&lt;p&gt;I'm also using ems for my padding and margins. You can reserve an amount of space relative to the current font size. For example, if you use ems and make a change to your font size, all the spacing around your site will size down accordingly.&lt;/p&gt;




&lt;p&gt;With pixels you would have to change every definition in every media query. Why not let typography define your design instead!&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Chris Coyier&amp;rsquo;s article &lt;a href='http://css-tricks.com/why-ems/' target='blank'&gt;Why Ems?&lt;/a&gt; helped me better understand these concepts.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Modular Scales&lt;/h3&gt;




&lt;p&gt;Now lets combine ems with Tim Brown's presentation on Modular Scales:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;A modular scale is a sequence of numbers that relate to one another in a meaningful way.&lt;/li&gt;
    &lt;li&gt;When using a modular scale, chose numbers based off others.&lt;/li&gt;
    &lt;li&gt;Be more perfect - but not exactly perfect! Measurements can relate to one another even without all the strictness.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;At first, I was a little intimidated with the math that goes with using a modular scale.&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Modular Scale = (Key type size + ratio)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;18px @ 1:1.333&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;h1 = 2.369em&lt;/li&gt;
    &lt;li&gt;h2 = 1.777em&lt;/li&gt;
    &lt;li&gt;h3 = 1.333em&lt;/li&gt;
    &lt;li&gt;p = 1em/1.5em (line height)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I applied this equation to my blog and I'm thrilled with the results! Everything looks more natural and balanced. Numbers aren't everything. Design to me is still about intuition. As designers, we have a sense of when something feels right or wrong.&lt;/p&gt;




&lt;h2&gt;These new concepts helped me set the design for my blog: simple and clean.&lt;/h2&gt;




&lt;p&gt;I'm not taking myself too seriously yet. After all, learning should be fun! I really enjoyed my first assignment with typography. Thanks Stephanie!&lt;/p&gt;




&lt;p&gt;Here is a list of resources that helped me along the way:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;&lt;a href='http://vimeo.com/17079380' target='blank'&gt;More Perfect Typography&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href='http://informationarchitects.net/blog/100e2r/' target='blank'&gt;100% Easy-2-Read Standard&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href='http://informationarchitects.net/blog/the-web-is-all-about-typography-period/' target='blank'&gt;Web Design is 95% Typography&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href='http://wm4.wilsonminer.com/posts/2008/oct/20/relative-readability/' target='blank'&gt;Relative Readability&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href='http://css-tricks.com/why-ems/' target='blank'&gt;Why Ems?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Tue, 22 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/working-with-typography.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/working-with-typography.html</guid>
			</item>
		
			<item>
				<title>First Day at 8th Light</title>
				<description>&lt;h2&gt;Hi there! Today was the first day of my Novice Apprenticeship at &lt;a href='http://www.8thlight.com/' target='blank'&gt;8th Light&lt;/a&gt;.&lt;/h2&gt;




&lt;p&gt;I started my morning with a design standup with Stephanie and Chris. We talked about what it means to work on a story. Everyone plays a small part in helping to shape and complete a project at 8th Light. All this collaboration will go a long way in helping me refine my design process.&lt;/p&gt;




&lt;p&gt;A few things I learned today:&lt;/p&gt;




&lt;ul&gt;
    &lt;li&gt;Collaboration is key when coming up with a successful design.&lt;/li&gt;
    &lt;li&gt;Whole experiences can be harmonious and have a purpose just by starting with type.&lt;/li&gt;
    &lt;li&gt;Try to find some inspiration, natural references when starting a design. What's the hook? Type can be that hook!&lt;/li&gt;
    &lt;li&gt;Always provide solutions when communicating with a client.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Stay tuned for a post on working with typography!&lt;/p&gt;

</description>
				<pubDate>Mon, 21 Jan 2013 00:00:00 -0600</pubDate>
				<link>http://www.adamkaplandesign.com/first-day-at-8th-light.html</link>
				<guid isPermaLink="true">http://www.adamkaplandesign.com/first-day-at-8th-light.html</guid>
			</item>
		
	</channel>
</rss>
